/// <reference types="node" />
export interface Options {
    bin?: string;
    format: 'png' | 'jpeg' | 'tiff' | 'ps' | 'eps' | 'pdf' | 'svg';
    antialias?: 'default' | 'none' | 'gray' | 'subpixel' | 'fast' | 'good' | 'best';
    range?: {
        f?: number;
        l?: number;
    };
    filter?: 'odd' | 'even';
    singlefile?: boolean;
    resolution?: number | {
        x: number;
        y: number;
    };
    scale?: number | {
        x: number;
        y: number;
    };
    crop?: {
        x?: number;
        y?: number;
        W?: number;
        H?: number;
        sz?: number;
    };
    cropbox?: boolean;
    mono?: boolean;
    gray?: boolean;
    transparent?: boolean;
    level2?: boolean;
    level3?: boolean;
    originPageSizes?: boolean;
    icc?: string;
    jpegopt?: string;
    paper?: string | {
        w: number;
        h: number;
    };
    nocrop?: boolean;
    expand?: boolean;
    noshrink?: boolean;
    nocenter?: boolean;
    duplex?: boolean;
    ownerPassword?: string;
    userPassword?: string;
}
declare class PDFToCairo {
    private bin;
    private args;
    private input;
    constructor(file: string | Buffer, options: Options);
    output(): Promise<Buffer[]>;
    output(outputFile: string): Promise<null>;
    version(): Promise<string>;
}
export declare const input: (file: string | Buffer, options: Options) => PDFToCairo;
export declare const version: (options?: Options | undefined) => Promise<string>;
export {};
